
class Monster():
    def __init__(self, name, hp=20):
        self.exp = 0
        self.name = name
        self.type = 'Normal'
        self.max_hp = hp
        self.current_hp = self.max_hp
        self.attacks = {'wait': 0}
        self.possible_attacks = {'sneak_attack': 1, 'slash': 2, 'ice_storm': 3, 'fire_storm': 3, 'whirlwind': 3, 'earthquake': 2, 'double_hit': 4, 'tornado': 4, 'wait': 0}

    def add_attack(self, attack_name):
        if attack_name not in self.possible_attacks: # If you try to add an invalid attack return False.
            return False  # Invalid attack
        if len(self.attacks) == 4:  # If you add an attack when the monster already has four, the weakest one should be dropped automatically.

            weakest_attack_value = min(self.attacks.values())  # This will get the lowest attack value then I will collect them and if there is a tie pick the one that comes alphabetically
            weakest_at = [attack for attack, value in self.attacks.items() if value == weakest_attack_value]
            attack_remove = sorted(weakest_at)[0]
            del self.attacks[attack_remove]
        self.attacks[attack_name] = self.possible_attacks[attack_name]

        return True  # If adding the attack ended successfully, return True

    def remove_attack(self, attack_name):
    # this checks if it's a valid attack entry
        if attack_name not in self.attacks:
            return False
        del self.attacks[attack_name]
        if not self.attacks:
          self.attacks["wait"] = 0

        return True

        # Win_fight should add 5 to the monster's self.exp and reset their hp to max_hp.
        #"lose_fight" should also reset their hp but only adds 1 exp to self.exp.

    def win_fight(self):
        self.exp += 5
        self.current_hp = self.max_hp



    def lose_fight(self):
        self.exp += 1
        self.current_hp = self.max_hp


def monster_fight(monster1, monster2):
    if monster1.attacks == {"wait": 0} and monster2.attacks == {"wait": 0}:
        return -1, None, None

    monster1_attacks_used = []
    monster2_attacks_used = []
    round_num = 0

    monster1_attacks = sorted(monster1.attacks.items(), key=lambda x: (-x[1], x[0]))
    monster2_attacks = sorted(monster2.attacks.items(), key=lambda x: (-x[1], x[0]))
    monster1_attack_index = 0
    monster2_attack_index = 0

    while monster1.current_hp > 0 and monster2.current_hp > 0:

        round_num += 1
        print(f"Round number is {round_num}\n")


        attack_name1, damage1 = monster1_attacks[monster1_attack_index]
        monster1_attack_index = (monster1_attack_index + 1) % len(monster1_attacks)
        monster1_attacks_used.append(attack_name1)
        monster2.current_hp -= damage1

        if monster2.current_hp <= 0:
            monster1.win_fight()
            monster2.lose_fight()
            return round_num, monster1, monster1_attacks_used

        attack_name2, damage2 = monster2_attacks[monster2_attack_index]
        monster2_attack_index = (monster2_attack_index + 1) % len(monster2_attacks)
        monster2_attacks_used.append(attack_name2)
        monster1.current_hp -= damage2


        if monster1.current_hp <= 0:
            monster2.win_fight()
            monster1.lose_fight()
            return round_num, monster2, monster2_attacks_used



    return round_num, None, None



if __name__ == '__main__':
    fall1 = Monster("Water")
    fall1.add_attack("double_hit")
    fall1.add_attack("fire_storm")
    fall1.add_attack("ice_storm")

    fall2 = Monster("Food")
    fall2.add_attack("double_hit")
    fall2.add_attack("fire_storm")

    rounds, winner, attacks_used = monster_fight(fall1, fall2)

    if winner:
        print(f"Winner: {winner.name}")
        if attacks_used:
            print(f"Winning attacks: {', '.join(attacks_used)}")
    else:
        print("Draw")

